1>检查已有的配置信息:$ git config --list

2>配置名字:$ git config user.name

3> 获得工具的帮助:$ git help <命令>/$ git <命令> --help/$ man git-<命令>

4>要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行：$ git init

5>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：
  $ git add 文件名
  $ git commit -m '随意的记录文字'

6>克隆仓库的命令格式为 git clone [url]。比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：
  $ git clone git://github.com/zzmmyy/目录名.git (想要修改的目录名字)

7>确定哪些文件当前处于什么状态: $ git status

8>对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地   保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。



9>我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。来看一个实际的例子：
  $ cat .gitignore
    *.[oa]
    *~
  第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的，我们用不着跟踪它们的版本。第二行告诉   Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。此外，你可能还需要忽略 log，tmp 或者     pid 目录，以及自动生成的文档等等。要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。
  文件 .gitignore 的格式规范如下：
  所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。
  可以使用标准的 glob 模式匹配。
  匹配模式最后跟反斜杠（/）说明要忽略的是目录。
  要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
  所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个    例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有     在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。

10>要查看尚未暂存的文件更新了哪些部分，不加参数直接输入: $ git diff

11>若要看已经暂存起来的文件和上次提交时的快照之间的差异,用:$ git diff --cached
  （Git 1.6.1 及更高版本还允许使用：$ git diff --staged

12>Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一   并提交，从而跳过 git add 步骤

13>从工作目录中手工删除文件：$ rm 文件名
                            $ git rm 文件名    -f 强制删除  --cached  移除跟踪但不删除

14>文件重命名：$ git mv 老名字 新名字

15>按提交时间列出需哦有的更新：$ git log
   -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新， --stat仅显示简要的增改行数统计，
   --pretty可以指定使用完全不同于默认格式的方式展示提交历史

16>取消暂存：$ git reset HEAD 文件名

17>查看当前配置有哪些远程仓库：$git remote
   -v 显示对应的克隆地址

18>从远程仓库抓取数据到本地：$ git fetch 远程仓库

19>看所有克隆的仓库：$ git remote show 远程仓库

20>修改某个远程仓库在本地的简称：$ git remote rename 原名 新名

21>移除对应的远程仓库：$ git remote rm 远程仓库

22>列出现有标签： $ git tag

23>创建一个含附注类型的标签非常简单，用 -a （译注：取 annotated 的首字母）指定标签名字即可：
   $ git tag -a v1.4 -m 'my version 1.4'    
   -m 选项则指定了对应的标签说明

